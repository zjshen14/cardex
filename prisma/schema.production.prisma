// Production schema with PostgreSQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String?  @unique
  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cards         Card[]
  purchases     Transaction[] @relation("Buyer")
  sales         Transaction[] @relation("Seller")
  watchlist     Watchlist[]

  @@map("users")
}

model Card {
  id          String   @id @default(cuid())
  title       String
  description String?
  condition   Condition
  price       Float
  imageUrls   String[] // PostgreSQL supports arrays
  category    String
  set         String?
  rarity      String?
  cardNumber  String?
  year        Int?
  status      CardStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sellerId     String
  seller       User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  watchlist    Watchlist[]

  @@map("cards")
}

model Transaction {
  id        String            @id @default(cuid())
  amount    Float
  status    TransactionStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  buyerId  String
  buyer    User   @relation("Buyer", fields: [buyerId], references: [id])
  sellerId String
  seller   User   @relation("Seller", fields: [sellerId], references: [id])
  cardId   String
  card     Card   @relation(fields: [cardId], references: [id])

  @@map("transactions")
}

model Watchlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId String
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId])
  @@map("watchlist")
}

enum Condition {
  MINT
  NEAR_MINT
  EXCELLENT
  GOOD
  LIGHT_PLAYED
  PLAYED
  POOR
}

enum CardStatus {
  ACTIVE
  SOLD
  ARCHIVED
  DELETED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}